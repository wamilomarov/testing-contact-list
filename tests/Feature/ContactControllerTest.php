<?php

namespace Tests\Feature;

use App\Events\ChangesCommitted;
use App\Events\ContactDeleted;
use App\Events\SyncRequested;
use App\Http\Controllers\Api\Contacts\ContactController;
use App\Http\Resources\Contacts\ContactResource;
use App\Http\Services\SalesforceService;
use App\Jobs\Contacts\CreateContactJob;
use App\Jobs\Contacts\DeleteContactJob;
use App\Jobs\Contacts\UpdateContactJob;
use App\Models\Contact;
use Database\Factories\ContactFactory;
use Database\Factories\FactoryConstants;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\Resources\Json\AnonymousResourceCollection;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\Queue;
use Symfony\Component\HttpFoundation\Response as ResponseAlias;
use Tests\TestCase;

class ContactControllerTest extends TestCase
{
    use RefreshDatabase;

    private ContactController $contactController;
    private ContactFactory $contactFactory;
    private SalesforceService $salesforceService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->contactController = resolve(ContactController::class);
        $this->contactFactory = new ContactFactory();
        $this->salesforceService = \Mockery::mock(SalesforceService::class);
        $this->instance(SalesforceService::class, $this->salesforceService);
    }

    /**
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     */
    public function testIndex()
    {
        $this->contactFactory->createOne();

        $data = $this->contactController->index();

        $this->assertInstanceOf(AnonymousResourceCollection::class, $data, 'Contacts index does not return collection');
        $this->assertTrue($data->count() === 1);
    }

    /**
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     */
    public function testShow()
    {
        $this->contactFactory->createOne();

        /** @var Contact $contact */
        $contact = Contact::query()->firstWhere('email', FactoryConstants::CONTACT_EMAIL);
        $data = $this->contactController->show($contact);
        $this->assertInstanceOf(ContactResource::class, $data, 'Show contact did not return a resource.');
        $this->assertNotNull($data->resource, "Show returned an empty response");
    }

    /**
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     */
    public function testDestroyAssertJob()
    {
        $this->contactFactory->createOne();

        /** @var Contact $contact */
        $contact = Contact::query()->firstWhere('email', FactoryConstants::CONTACT_EMAIL);
        $this->expectsJobs([DeleteContactJob::class]);

        $this->contactController->destroy($contact);
    }

    /**
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     */
    public function testDestroyAssertEvent()
    {
        $this->contactFactory
            ->withField('salesforce_id', FactoryConstants::CONTACT_SALESFORCE_ID)
            ->createOne();
        $this->salesforceService
            ->expects('delete')
            ->andReturn([]);
        /** @var Contact $contact */
        $contact = Contact::query()->firstWhere('email', FactoryConstants::CONTACT_EMAIL);
        try {
            $this->expectsEvents(ContactDeleted::class);
        } catch (\Exception $e) {
            $this->fail("testDestroy should not fail for this case. {$e->getMessage()}");
        }

        $this->contactController->destroy($contact);

    }

    public function testSync()
    {
        try {
            $this->expectsEvents(SyncRequested::class);
        } catch (\Exception $e) {
            $this->fail("testSync should not fail for this case. {$e->getMessage()}");
        }

        $this->contactController->sync();
    }

    /**
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     */
    public function testStore()
    {
        $this->expectsJobs([CreateContactJob::class]);

        $this->post(
            route("contacts.store"),
            [
                'first_name' => "Shamil",
                'last_name' => "Omarov",
                'email' => FactoryConstants::CONTACT_EMAIL,
                'phone' => '12356789',
            ]
        )->assertStatus(ResponseAlias::HTTP_CREATED)
        ->assertJsonFragment([
            'first_name' => "Shamil",
            'last_name' => "Omarov",
            'email' => FactoryConstants::CONTACT_EMAIL,
            'phone' => '12356789',
        ]);
    }

    /**
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     */
    public function testUpdate()
    {
        $this->contactFactory
            ->withField('salesforce_id', FactoryConstants::CONTACT_SALESFORCE_ID)
            ->withField('email', "someanother@email.com")
            ->createOne();

        $this->expectsJobs([UpdateContactJob::class]);

        $this->putJson(
            route("contacts.update", ['contact' => FactoryConstants::CONTACT_SALESFORCE_ID]),
            [
                'first_name' => "Shamil",
                'last_name' => "Omarov",
                'email' => FactoryConstants::CONTACT_EMAIL,
                'phone' => '12356789',
            ]
        )
            ->assertStatus(ResponseAlias::HTTP_OK)
            ->assertJsonFragment([
                'first_name' => "Shamil",
                'last_name' => "Omarov",
                'email' => FactoryConstants::CONTACT_EMAIL,
                'phone' => '12356789',
            ]);

        $this->assertDatabaseHas((new Contact())->getTable(), [
            'email' => FactoryConstants::CONTACT_EMAIL
        ]);
    }

    /**
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     */
    public function testEventInJob()
    {
        $this->salesforceService
            ->expects('create')
            ->andReturn(FactoryConstants::CONTACT_SALESFORCE_ID);
        $this->contactFactory->createOne();
        /** @var Contact $contact */
        $contact = Contact::query()->firstWhere('email', FactoryConstants::CONTACT_EMAIL);
        try {
            $this->expectsEvents(ChangesCommitted::class);
        } catch (\Exception $e) {
            $this->fail("testEventInJob should not fail for this case. {$e->getMessage()}");
        }
        dispatch(new CreateContactJob($contact));
    }


}
